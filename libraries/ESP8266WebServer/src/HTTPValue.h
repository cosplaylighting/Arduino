

template <class T>
class HTTPValue {
	public:



	////////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR
	////////////////////////////////////////////////////////////////////////////
	inline HTTPValue() {
		key = value = nullptr;
	}




	////////////////////////////////////////////////////////////////////////////
	// DELETE ALL VALUE POINTERS
	////////////////////////////////////////////////////////////////////////////
	static inline void reset() {
		if (items) delete[] items;
		items = nullptr;
		count = 0;
	}




	////////////////////////////////////////////////////////////////////////////
	// ALLOCATE A NEW BUFFER
	// THIS DETECTS ALLOCATION ERRORS NOW
	// ITEM LIST ASSUMED EMPTY IF CANNOT ALLOCATE POINTER BUFFER
	////////////////////////////////////////////////////////////////////////////
	static inline void allocate(int total) {
		reset();
		if (total) items = new(std::nothrow) T [total];
		if (items) count = total;
	}




	////////////////////////////////////////////////////////////////////////////
	// GET A VALUE BASED ON ID
	////////////////////////////////////////////////////////////////////////////
	static inline int total() {
		return count;
	}




	////////////////////////////////////////////////////////////////////////////
	// GET A VALUE BASED ON ID
	////////////////////////////////////////////////////////////////////////////
	static inline T *get(int id) {
		if (id >= total()  ||  id < 0) return nullptr;
		return &items[id];
	}




	////////////////////////////////////////////////////////////////////////////
	// CHECK IF A VALUE NAME EXISTS
	////////////////////////////////////////////////////////////////////////////
	static inline bool has(const char *name) {
		return !!get(name);
	}

	static inline bool has(String name) {
		return has(name.c_str());
	}




	////////////////////////////////////////////////////////////////////////////
	// GET A VALUE BASED ON NAME (C-STRING)
	////////////////////////////////////////////////////////////////////////////
	static T *get(const char *name) {
		if (name == nullptr  ||  *name == NULL) return nullptr;

		for (auto i=0; i<total(); i++) {
			if (strcasecmp(items[i].key, name) == 0) {
				return &items[i];
			}
		}

		return nullptr;
	}




	////////////////////////////////////////////////////////////////////////////
	// GET A VALUE BASED ON NAME (ARDUINO STRING)
	////////////////////////////////////////////////////////////////////////////
	static inline T *get(String name) {
		return get(name.c_str());
	}




	////////////////////////////////////////////////////////////////////////////
	// SET THE VALUE
	////////////////////////////////////////////////////////////////////////////
	inline void set(const char *key, const char *value=nullptr) {
		this->key	= key;
		this->value	= value;
	}




	////////////////////////////////////////////////////////////////////////////
	// STATIC VERSION OF SETTING THE VALUE
	////////////////////////////////////////////////////////////////////////////
	static inline void set(int id, const char *key, const char *value=nullptr) {
		T *item = get(id);
		if (item) item->set(key, value);
	}




	////////////////////////////////////////////////////////////////////////////
	// MEMBER VARIABLES
	////////////////////////////////////////////////////////////////////////////
	public:
	const	char	*key;
	const	char	*value;




	////////////////////////////////////////////////////////////////////////////
	// STATIC VARIABLES
	////////////////////////////////////////////////////////////////////////////
	protected:
	static	int		 count;
	static	T		*items;
};




////////////////////////////////////////////////////////////////////////////////
// TOTAL NUMBER OF OBJECTS
////////////////////////////////////////////////////////////////////////////////
template <class T>
int	 HTTPValue<T>::count	= 0;




////////////////////////////////////////////////////////////////////////////////
// POINTER TO LIST OF OBJECTS
////////////////////////////////////////////////////////////////////////////////
template <class T>
T	*HTTPValue<T>::items	= nullptr;
