#ifndef __HTTP_HEADER_H__
#define __HTTP_HEADER_H__



#include "ESP8266WebServerHelper.h"

/*
this class will take over ALL header related code
this includes parsing the header
storing the pointers into the header buffer
getting the total number of headers
retrieving header values from keys
retrieving header values from ids
seeing if keys exist
enum all headers
*/

class HTTPHeader {
	public:



	////////////////////////////////////////////////////////////////////////////
	// CONSTRUCTOR
	////////////////////////////////////////////////////////////////////////////
	inline HTTPHeader() {
		key = value = nullptr;
	}




	////////////////////////////////////////////////////////////////////////////
	// DELETE ALL HEADER POINTERS
	////////////////////////////////////////////////////////////////////////////
	static inline void reset() {
		process(nullptr);
	}




	////////////////////////////////////////////////////////////////////////////
	// GET A HEADER BASED ON ID
	////////////////////////////////////////////////////////////////////////////
	static inline int total() {
		return count;
	}




	////////////////////////////////////////////////////////////////////////////
	// GET A HEADER BASED ON ID
	////////////////////////////////////////////////////////////////////////////
	static inline HTTPHeader *get(int id) {
		if (id >= total()  ||  id < 0) return nullptr;
		return &headers[id];
	}




	////////////////////////////////////////////////////////////////////////////
	// CHECK IF A HEADER NAME EXISTS
	////////////////////////////////////////////////////////////////////////////
	static inline bool has(const char *name) {
		return !!get(name);
	}

	static inline bool has(String name) {
		return has(name.c_str());
	}




	////////////////////////////////////////////////////////////////////////////
	// GET A HEADER BASED ON NAME
	////////////////////////////////////////////////////////////////////////////
	static HTTPHeader *get(const char *name);

	static inline HTTPHeader *get(String name) {
		return get(name.c_str());
	}




	////////////////////////////////////////////////////////////////////////////
	// SET THE HEADER
	////////////////////////////////////////////////////////////////////////////
	inline void set(const char *key, const char *value=nullptr) {
		this->key	= key;
		this->value	= value;
	}




	////////////////////////////////////////////////////////////////////////////
	// STATIC VERSION OF SETTING THE HEADER
	////////////////////////////////////////////////////////////////////////////
	static inline void set(int id, const char *key, const char *value=nullptr) {
		HTTPHeader *header = get(id);
		if (header) header->set(key, value);
	}




	////////////////////////////////////////////////////////////////////////////
	// PROCESS THE BUFFER
	////////////////////////////////////////////////////////////////////////////
	static char *process(char *buffer);




	////////////////////////////////////////////////////////////////////////////
	// CALCULATE THE TOTAL NUMBER OF HEADER ROWS
	////////////////////////////////////////////////////////////////////////////
	protected:
	static int _count(const char *buffer);




	////////////////////////////////////////////////////////////////////////////
	// PARSE AND TOKENIZE THE BUFFER
	////////////////////////////////////////////////////////////////////////////
	protected:
	static char *_parse(char *buffer);




	////////////////////////////////////////////////////////////////////////////
	// MEMBER VARIABLES
	////////////////////////////////////////////////////////////////////////////
	public:
	const	char		*key;
	const	char		*value;




	////////////////////////////////////////////////////////////////////////////
	// STATIC VARIABLES
	////////////////////////////////////////////////////////////////////////////
	protected:
	static	int			 count;
	static	HTTPHeader	*headers;
};



#endif //__HTTP_HEADER_H__

